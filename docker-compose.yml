services:
  frontend:
    build:
      context: ./frontend
      target: production
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: always

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
    env_file:
      - .env
    environment:
      - WS_URL=wss://advanced-trade-ws.coinbase.com
      - USE_ALL_USD_PAIRS=true
      - VOLUME_THRESHOLD=${VOLUME_THRESHOLD:-1.5}
      - WINDOW_MINUTES=${WINDOW_MINUTES:-5}
      - EMIT_RAW_TRADES=${EMIT_RAW_TRADES:-false}
    networks:
      - app-network
    restart: always

  spike-detector:
    build:
      context: ./bots/spike-detector
      dockerfile: Dockerfile
    depends_on:
      - backend
    volumes:
      - ./data:/app/data
    env_file:
      - .env
    environment:
      - BACKEND_URL=http://backend:5000
      - PRICE_SPIKE_THRESHOLD=${PRICE_SPIKE_THRESHOLD:-5.0}
      - PRICE_WINDOW_MINUTES=${PRICE_WINDOW_MINUTES:-5}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DB_PATH=/app/data/spike_alerts.db
    networks:
      - app-network
    restart: unless-stopped

  telegram-bot:
    build:
      context: ./bots/telegram
      dockerfile: Dockerfile
    depends_on:
      - backend
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - ALERTS_CHANNEL_ID=${ALERTS_CHANNEL_ID:-}
      - BACKEND_URL=http://backend:5000
      - WEBHOOK_PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - app-network
    restart: unless-stopped

  # trading-bot: Disabled - telegram-bot handles trading directly via TradingManager
  # trading-bot:
  #   build: ./bots/trading
  #   env_file:
  #     - .env
  #   networks:
  #     - app-network
  #   restart: always

  ngrok:
    image: ngrok/ngrok:alpine
    command: http frontend:80
    ports:
      - "4040:4040"
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    depends_on:
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  # log-monitor:
  #   build: 
  #     context: ./bots/logs-monitor
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - telegram-bot
  #     - backend 
  #     - spike-detector
  #   volumes: 
  #     # For Windows, use named pipe instead of unix socket
  #     - //var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - TELEGRAM_WEBHOOK_URL=http://telegram-bot:8080/webhook
  #     - MONITOR_INTERVAL=30
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #     # Add Docker host for Windows
  #     - DOCKER_HOST=unix:///var/run/docker.sock
  #   networks:
  #     - app-network
  #   restart: unless-stopped

 # Use nodemon for auto-reload

networks:
  app-network:
    driver: bridge

volumes:
  data:
